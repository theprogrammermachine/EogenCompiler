
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import models.*;
import helpers.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

parser code {:

    EogenLexer lexer;
    public Stack<Hashtable<String, Codes.DataType>> symbols = new Stack<Hashtable<String, Codes.DataType>>();
    public Stack<Hashtable<String, HashSet<String>>> funcs = new Stack<Hashtable<String, HashSet<String>>>();
    public int currentLine = 0, currentColumn = 0;
    public boolean endDetected = false;

    EogenParser(EogenLexer lexer) {
        super(lexer);
        this.lexer = lexer;
        this.symbols.push(new Hashtable<String, Codes.DataType>());
        this.funcs.push(new Hashtable<String, HashSet<String>>());
    }

    public void syntax_error(Symbol s) {
        System.out.println("Syntax Error near " + sym.terminalNames[s.sym] + " at [line : " + s.left + ", column : " + s.right + "]");
    }
:}

init with {:

:};

scan with {:
    Symbol token = this.lexer.next_token();
    currentLine = token.left;
    currentColumn = token.right;
    if (endDetected) {
       symbols.pop();
       funcs.pop();
       endDetected = false;
    }
    if (token.sym == sym.START) {
        symbols.push(new Hashtable<String, Codes.DataType>());
        funcs.push(new Hashtable<String, HashSet<String>>());
    } else if (token.sym == sym.END) {
        endDetected = true;
    }
    return token;
:};

terminal SUM, SUBTRACT, MULTIPLY, DIVISION, POWER, MOD, AND, OR, UMINUS, EQUAL, LPAREN, RPAREN, LBRACE, RBRACE, SEMI, COLON, COMMA,
         FOR, IF, ELSE, SWITCH, CASE, WHILE, IS, FOREACH, TRY, CATCH, BASED, ON, BEHAVES, LIKE, CLASS, BEHAVIOUR, FUNCTION,
         OF, INSTANCE, EMPTY, CHAINSIGN, ASSIGN, GT, LT, GE, LE, NE, EXEC, ARROW, ENCAPSULATE, RETURN, DEFINE, NAMED, WITH, PARAMS,
         CONDITIONS, TRUE, FALSE, ARE, SATISFIED, THEN, LOOP, TIMES, BY, STEP, AS, NOT, EACH, IN, REMEMBER, PROPS, OBJECT, ACTION,
         CAREFULLY, DO, ERROR, CAUGHT, UNTIL, TAB, START, END, ITEM, ARGS, LBRACKET, RBRACKET, NEW, PROP, VALUE, DOING;
terminal String IDENTIFIER;
terminal Double NUMBER;
terminal String STRING;

nonterminal root, exp, exp_list, for_exp, foreach_exp, while_exp, if_exp, switch_exp, try_exp, function_exp, func_level_exp,
            behaviour_exp, class_exp, elseif_exp, case_exp, arg_list, param_list, param, epsilon, callback_exp,
            case_list, exp_comma_list, chain_exp, loop_exp, var_def_exp, array, subarray, comparing_exp, compare_concat_exp,
            value_exp, operation_exp, of_exp, instantiation_exp, class_extensions, id_comma_list, identifier, id_comma_sublist,
            else_exp, func_params, instance_props;

precedence left AND, OR;
precedence left EQUAL, GT, LT, GE, LE, NE, ARROW;
precedence left ASSIGN, SEMI, COLON, COMMA;
precedence left DO;
precedence left IN, IS, ON;
precedence left OF, BY;
precedence left AS;
precedence left SUM, SUBTRACT;
precedence left MULTIPLY, DIVISION, MOD;
precedence left POWER;
precedence left UMINUS;
precedence left LPAREN, RPAREN, LBRACE, RBRACE;
precedence left FOR, IF, ELSE, UNTIL, EACH, TRY, CATCH, BASED, BEHAVES, LIKE, CLASS, BEHAVIOUR,
                FUNCTION, IDENTIFIER, EXEC, ENCAPSULATE, INSTANCE, NUMBER, STRING, EMPTY, CHAINSIGN,
                RETURN, DEFINE, NAMED, WITH, PARAMS, CONDITIONS, TRUE, FALSE, ARE, SATISFIED, THEN, LOOP,
                TIMES, STEP, NOT, EACH, REMEMBER, PROPS, OBJECT, ACTION, CAREFULLY, ERROR, CAUGHT, TAB,
                START, END, ITEM, ARGS, LBRACKET, RBRACKET, NEW, PROP, VALUE, DOING;

start with root;

// driver --------------------------------------------------------------------------------------------------------------
root ::=
  exp_list:el
              {:
                  Gson gson = new GsonBuilder().setPrettyPrinting().create();
                  JsonParser jp = new JsonParser();
                  JsonElement je = jp.parse(JsonHelper.toJson(el, new TypeReference<List<Codes.Code>>(){}));
                  String prettyJsonString = gson.toJson(je);
                  System.out.println("Middle code :");
                  System.out.println(prettyJsonString);
                  RESULT = el;
              :}
;
// main ----------------------------------------------------------------------------------------------------------------
exp_list ::=
  exp:e1
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)e1);
                  RESULT = r;
              :} |
  exp_list:el exp:e1
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)e1);
                  RESULT = r;
              :} |
  if_exp:ie
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)ie);
                  RESULT = r;
              :} |
  if_exp:ie exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)ie);
                  RESULT = r;
              :} |
  exp_list:el if_exp:ie
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)ie);
                  RESULT = r;
              :} |
  loop_exp:le
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)le);
                  RESULT = r;
              :} |
  loop_exp:le exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)le);
                  RESULT = r;
              :} |
  exp_list:el loop_exp:le
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)le);
                  RESULT = r;
              :} |
  var_def_exp:vde
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)vde);
                  RESULT = r;
              :} |
  var_def_exp:vde exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)vde);
                  RESULT = r;
              :} |
  exp_list:el var_def_exp:vde
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)vde);
                  RESULT = r;
              :} |
  try_exp:te
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)te);
                  RESULT = r;
              :} |
  try_exp:te exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)te);
                  RESULT = r;
              :} |
  exp_list:el try_exp:te
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)te);
                  RESULT = r;
              :} |
  function_exp:fe
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :} |
  function_exp:fe exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)fe);
                  RESULT = r;
              :} |
  exp_list:el function_exp:fe
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :} |
  class_exp:fe
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :} |
  class_exp:fe exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)fe);
                  RESULT = r;
              :} |
  exp_list:el class_exp:fe
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :} |
  behaviour_exp:fe
              {:
                  List<Codes.Code> r = new ArrayList<Codes.Code>();
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :} |
  behaviour_exp:fe exp_list:el
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add(0, (Codes.Code)fe);
                  RESULT = r;
              :} |
  exp_list:el behaviour_exp:fe
              {:
                  List<Codes.Code> r = (List<Codes.Code>)el;
                  r.add((Codes.Code)fe);
                  RESULT = r;
              :}
;
// class - behaviour ---------------------------------------------------------------------------------------------------
class_exp ::=
              DEFINE CLASS IDENTIFIER:i class_extensions:ce COLON START exp_list:el END
              {:
                  Codes.Class classExp = new Codes.Class();
                  classExp.setName((String)i);
                  classExp.setExtensions((List<Codes.Code>)ce);
                  classExp.setCodes((List<Codes.Code>)el);
                  RESULT = classExp;
              :} |
              DEFINE error IDENTIFIER:i class_extensions:ce COLON START exp_list:el END
              {:
                  System.out.println("Missing CLASS");
              :} |
              DEFINE CLASS error class_extensions:ce COLON START exp_list:el END
              {:
                  System.out.println("Missing Identifier");
              :} |
              DEFINE CLASS IDENTIFIER:i class_extensions:ce error START exp_list:el END
              {:
                  System.out.println("Missing COLON");
              :} |
              DEFINE CLASS IDENTIFIER:i class_extensions:ce COLON error exp_list:el END
              {:
                  System.out.println("Missing START");
              :} |
              DEFINE CLASS IDENTIFIER:i class_extensions:ce COLON START exp_list:el error
              {:
                  System.out.println("Missing END");
              :}
;
class_extensions ::=
              BASED ON IDENTIFIER:i class_extensions:ce
              {:
                  Codes.BasedOnExtension boe = new Codes.BasedOnExtension();
                  boe.setName((String)i);
                  List<Codes.Code> extensions = (List<Codes.Code>)ce;
                  extensions.add(boe);
                  RESULT = extensions;
              :} |
              BASED error IDENTIFIER:i class_extensions:ce
              {:
                  System.out.println("Missing ON");
              :} |
              BASED ON error class_extensions:ce
              {:
                  System.out.println("Missing Identifier");
              :} |
              BEHAVES LIKE IDENTIFIER:i class_extensions:ce
              {:
                  Codes.BehavesLikeExtension ble = new Codes.BehavesLikeExtension();
                  ble.setName((String)i);
                  List<Codes.Code> extensions = (List<Codes.Code>)ce;
                  extensions.add(ble);
                  RESULT = extensions;
              :} |
              BEHAVES error IDENTIFIER:i class_extensions:ce
              {:
                  System.out.println("Missing LIKE");
              :} |
              BEHAVES LIKE error class_extensions:ce
              {:
                  System.out.println("Missing Identifier");
              :} |
              {:
                  RESULT = new ArrayList<Codes.Code>();
              :}
;
behaviour_exp ::=
              DEFINE BEHAVIOUR IDENTIFIER:i COLON START exp_list:el END
              {:
                  Codes.Behaviour behaviour = new Codes.Behaviour();
                  behaviour.setName((String)i);
                  behaviour.setCodes((List<Codes.Code>)el);
                  RESULT = behaviour;
              :} |
              DEFINE error IDENTIFIER:i COLON START exp_list:el END
              {:
                  System.out.println("Missing BEHAVIOUR");
              :} |
              DEFINE BEHAVIOUR error COLON START exp_list:el END
              {:
                  System.out.println("Missing Identifier");
              :} |
              DEFINE BEHAVIOUR IDENTIFIER:i error START exp_list:el END
              {:
                  System.out.println("Missing COLON");
              :} |
              DEFINE BEHAVIOUR IDENTIFIER:i COLON error exp_list:el END
              {:
                  System.out.println("Missing START");
              :} |
              DEFINE BEHAVIOUR IDENTIFIER:i COLON START error END
              {:
                  System.out.println("Missing action");
              :} |
              DEFINE BEHAVIOUR IDENTIFIER:i COLON START exp_list:el error
              {:
                  System.out.println("Missing END");
              :}
;
// function ------------------------------------------------------------------------------------------------------------
function_exp ::=
           DEFINE FUNCTION func_level_exp:fle NAMED IDENTIFIER:i func_params:fp COLON
           START exp_list:el END
           {:
               Codes.Function func = new Codes.Function();
               func.setName((String)i);
               func.setParams((List<Codes.Identifier>)fp);
               func.setLevel((Codes.DataLevel)fle);
               func.setCodes((List<Codes.Code>)el);
               RESULT = func;
               HashSet<String> inputs = new HashSet<String>();
               for (Codes.Identifier id : (List<Codes.Identifier>)fp)
                   inputs.add(id.getName());
               funcs.peek().put((String)i, inputs);
           :} |
           DEFINE error func_level_exp:fle NAMED IDENTIFIER:i func_params:fp COLON
           START exp_list:el END
           {:
               System.out.println("Missing FUNCTION");
           :} |
           DEFINE FUNCTION func_level_exp:fle error IDENTIFIER:i func_params:fp COLON
           START exp_list:el END
           {:
               System.out.println("Missing NAMED");
           :} |
           DEFINE FUNCTION func_level_exp:fle NAMED error func_params:fp COLON
           START exp_list:el END
           {:
               System.out.println("Missing Identifier");
           :} |
           DEFINE FUNCTION func_level_exp:fle NAMED IDENTIFIER:i func_params:fp error
           START exp_list:el END
           {:
               System.out.println("Missing COLON");
           :} |
           DEFINE FUNCTION func_level_exp:fle NAMED IDENTIFIER:i func_params:fp COLON
           error exp_list:el END
           {:
               System.out.println("Missing START");
           :} |
           DEFINE FUNCTION func_level_exp:fle NAMED IDENTIFIER:i func_params:fp COLON
           START exp_list:el error
           {:
               System.out.println("Missing END");
           :}
;
func_params ::=
           WITH PARAMS IDENTIFIER:i id_comma_list:ecl
           {:
               List<Codes.Identifier> ids = (List<Codes.Identifier>)ecl;
               Codes.Identifier id = new Codes.Identifier();
               id.setName(i);
               ids.add(id);
               RESULT = ids;
           :} |
           WITH PARAMS IDENTIFIER:i
           {:
               List<Codes.Identifier> ids = new ArrayList<Codes.Identifier>();
               Codes.Identifier id = new Codes.Identifier();
               id.setName(i);
               ids.add(id);
               RESULT = ids;
           :} |
           WITH error id_comma_list
           {:
               System.out.println("Missing PARAMS");
           :} |
           {:
               RESULT = new ArrayList<Codes.Identifier>();
           :}
;
func_level_exp ::=
           OF INSTANCE
           {:
               RESULT = Codes.DataLevel.InstanceLevel;
           :} |
           OF CLASS
           {:
               RESULT = Codes.DataLevel.ClassLevel;
           :} |
           OF error
           {:
               System.out.println("Missing data level");
           :} |
           {:
               RESULT = Codes.DataLevel.InstanceLevel;
           :}
;
// try - catch ---------------------------------------------------------------------------------------------------------
try_exp ::=
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               Codes.Try tryExp = new Codes.Try();
               tryExp.setTryCode((List<Codes.Code>)el);
               Codes.Identifier id = new Codes.Identifier();
               id.setName(i);
               tryExp.setExVar(id);
               tryExp.setCatchCode((List<Codes.Code>)el2);
               RESULT = tryExp;
           :} |
           TRY error CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing ACTION");
           :} |
           TRY ACTION error COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing CAREFULLY");
           :} |
           TRY ACTION CAREFULLY error START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing COLON");
           :} |
           TRY ACTION CAREFULLY COLON error exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing START");
           :} |
           TRY ACTION CAREFULLY COLON START error END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing action");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el error
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing END");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           error ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing DO");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO error ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing ACTION");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION error ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing ON");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON error CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing ERROR");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR error AS IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing CAUGHT");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT error IDENTIFIER:i COLON START exp_list:el2 END
           {:
               System.out.println("Missing AS");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS error COLON START exp_list:el2 END
           {:
               System.out.println("Missing Identifier");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i error START exp_list:el2 END
           {:
               System.out.println("Missing COLON");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON error exp_list:el2 END
           {:
               System.out.println("Missing START");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START error END
           {:
               System.out.println("Missing action");
           :} |
           TRY ACTION CAREFULLY COLON START exp_list:el END
           DO ACTION ON ERROR CAUGHT AS IDENTIFIER:i COLON START exp_list:el2 error
           {:
               System.out.println("Missing END");
           :}
;
// variable definition -------------------------------------------------------------------------------------------------
var_def_exp ::=
           REMEMBER:r exp:e AS IDENTIFIER:i
           {:
               Codes.Assignment assign = new Codes.Assignment();
               Codes.Identifier id = new Codes.Identifier();
               id.setName((String)i);
               assign.setVar(id);
               assign.setValue((Codes.Code)e);
               RESULT = assign;
               if (e instanceof Codes.Value) {
                   Codes.DataType dataType = Codes.DataType.Number;
                   if (((Codes.Value)e).getValue() instanceof Double) {
                       dataType = Codes.DataType.Number;
                   } else if (((Codes.Value)e).getValue() instanceof String) {
                       dataType = Codes.DataType.String;
                   } else if (((Codes.Value)e).getValue() instanceof Boolean) {
                       dataType = Codes.DataType.Bool;
                   }
                   if (symbols.peek().containsKey((String)i)) {
                       if (symbols.peek().get((String)i) != dataType) {
                           System.out.println("Type Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : Types not matched together");
                           System.out.println("identifier " + i + " is of type [" + symbols.peek().get((String)i) + "] but is assigned by a value of type [" + dataType + "].");
                       }
                   } else {
                       symbols.peek().put((String)i, dataType);
                   }
               }
           :} |
           REMEMBER error AS IDENTIFIER:i
           {:
               System.out.println("Missing value");
           :} |
           REMEMBER exp:e error IDENTIFIER:i
           {:
               System.out.println("Missing AS");
           :} |
           REMEMBER exp:e AS error
           {:
               System.out.println("Missing Identifier");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:icl DOING COLON START exp_list:el END AS IDENTIFIER:i
           {:
               Codes.Assignment assign = new Codes.Assignment();
               Codes.Identifier id = new Codes.Identifier();
               id.setName((String)i);
               assign.setVar(id);
               Codes.Function func = new Codes.Function();
               func.setName("");
               func.setParams((List<Codes.Identifier>)icl);
               func.setCodes((List<Codes.Code>)el);
               assign.setValue(func);
               RESULT = assign;
           :} |
           ENCAPSULATE error WITH PARAMS id_comma_list:ecl DOING COLON START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing FUNCTION");
           :} |
           ENCAPSULATE FUNCTION error PARAMS id_comma_list:ecl DOING COLON START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing WITH");
           :} |
           ENCAPSULATE FUNCTION WITH error id_comma_list:ecl DOING COLON START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing PARAMS");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS error DOING COLON START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing params list");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl error COLON START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing DOING");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING error START exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing COLON");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING COLON error exp_list:el END AS IDENTIFIER:i
           {:
               System.out.println("Missing START");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING COLON START error END AS IDENTIFIER:i
           {:
               System.out.println("Missing action");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING COLON START exp_list:el error AS IDENTIFIER:i
           {:
               System.out.println("Missing END");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING COLON START exp_list:el END error IDENTIFIER:i
           {:
               System.out.println("Missing AS");
           :} |
           ENCAPSULATE FUNCTION WITH PARAMS id_comma_list:ecl DOING COLON START exp_list:el END AS error
           {:
               System.out.println("Missing Identifier");
           :} |
           ENCAPSULATE of_exp:oe AS IDENTIFIER:i
           {:
               Codes.Assignment assign = new Codes.Assignment();
               Codes.Identifier id = new Codes.Identifier();
               id.setName((String)i);
               assign.setVar(id);
               assign.setValue((Codes.Code)oe);
               RESULT = assign;
           :} |
           ENCAPSULATE error AS IDENTIFIER:i
           {:
               System.out.println("Missing callback");
           :} |
           ENCAPSULATE of_exp:oe error IDENTIFIER:i
           {:
               System.out.println("Missing AS");
           :} |
           ENCAPSULATE of_exp:oe AS error
           {:
               System.out.println("Missing Identifier");
           :} |
           DEFINE PROP func_level_exp:fle NAMED IDENTIFIER:i WITH VALUE exp:e
           {:
               Codes.Prop prop = new Codes.Prop();
               Codes.Identifier id = new Codes.Identifier();
               id.setName((String)i);
               prop.setId(id);
               prop.setLevel((Codes.DataLevel)fle);
               prop.setValue((Codes.Code)e);
               RESULT = prop;
               if (e instanceof Codes.Value) {
                   Codes.DataType dataType = Codes.DataType.Number;
                   if (((Codes.Value)e).getValue() instanceof Double) {
                       dataType = Codes.DataType.Number;
                   } else if (((Codes.Value)e).getValue() instanceof String) {
                       dataType = Codes.DataType.String;
                   } else if (((Codes.Value)e).getValue() instanceof Boolean) {
                       dataType = Codes.DataType.Bool;
                   }
                   if (symbols.peek().containsKey((String)i)) {
                       System.out.println("Prop Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : class property is already defined");
                   } else {
                       symbols.peek().put((String)i, dataType);
                   }
               }
           :} |
           DEFINE error func_level_exp:fle NAMED IDENTIFIER:i WITH VALUE exp:e
           {:
               System.out.println("Missing PROP");
           :} |
           DEFINE PROP func_level_exp:fle error IDENTIFIER:i WITH VALUE exp:e
           {:
               System.out.println("Missing NAMED");
           :} |
           DEFINE PROP func_level_exp:fle NAMED error WITH VALUE exp:e
           {:
               System.out.println("Missing Identifier");
           :} |
           DEFINE PROP func_level_exp:fle NAMED IDENTIFIER:i error VALUE exp:e
           {:
               System.out.println("Missing WITH");
           :} |
           DEFINE PROP func_level_exp:fle NAMED IDENTIFIER:i WITH error exp:e
           {:
               System.out.println("Missing VALUE");
           :} |
           DEFINE PROP func_level_exp:fle NAMED IDENTIFIER:i WITH VALUE error
           {:
               System.out.println("Missing END");
           :}
;
// loop ----------------------------------------------------------------------------------------------------------------
loop_exp ::=
           LOOP FOR LPAREN exp:e RPAREN TIMES COLON START exp_list:el END
           {:
               Codes.CounterFor forExp = new Codes.CounterFor();
               forExp.setLimit((Codes.Code)e);
               forExp.setStep(null);
               forExp.setCodes((List<Codes.Code>)el);
               RESULT = forExp;
           :} |
           LOOP error LPAREN exp RPAREN TIMES COLON START exp_list:el END
           {:
               System.out.println("Missing FOR");
           :} |
           LOOP FOR error exp RPAREN TIMES COLON START exp_list:el END
           {:
               System.out.println("Missing LPAREN");
           :} |
           LOOP FOR LPAREN error RPAREN TIMES COLON START exp_list:el END
           {:
               System.out.println("Missing Identifier");
           :} |
           LOOP FOR LPAREN exp error TIMES COLON START exp_list:el END
           {:
               System.out.println("Missing RPAREN");
           :} |
           LOOP FOR LPAREN exp RPAREN error COLON START exp_list:el END
           {:
               System.out.println("Missing TIMES");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES error START exp_list:el END
           {:
               System.out.println("Missing COLON");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES COLON error exp_list:el END
           {:
               System.out.println("Missing START");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES COLON START error END
           {:
               System.out.println("Missing action");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES COLON START exp_list:el error
           {:
               System.out.println("Missing END");
           :} |
           LOOP FOR LPAREN exp:e RPAREN TIMES BY STEP exp:e2 COLON START exp_list:el END
           {:
               Codes.CounterFor forExp = new Codes.CounterFor();
               forExp.setLimit((Codes.Code)e);
               forExp.setStep((Codes.Code)e2);
               forExp.setCodes((List<Codes.Code>)el);
               RESULT = forExp;
           :} |
           LOOP error LPAREN exp RPAREN TIMES BY STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing FOR");
           :} |
           LOOP FOR error exp RPAREN TIMES BY STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing LPAREN");
           :} |
           LOOP FOR LPAREN error RPAREN TIMES BY STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing IDENTIFIER");
           :} |
           LOOP FOR LPAREN exp error TIMES BY STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing RPAREN");
           :} |
           LOOP FOR LPAREN exp RPAREN error BY STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing TIMES");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES error STEP exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing BY");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY error exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing STEP");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY STEP error COLON START exp_list:el END
           {:
               System.out.println("Missing step value");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY STEP exp:e error START exp_list:el END
           {:
               System.out.println("Missing COLON");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY STEP exp:e COLON error exp_list:el END
           {:
               System.out.println("Missing START");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY STEP exp:e COLON START error END
           {:
               System.out.println("Missing action");
           :} |
           LOOP FOR LPAREN exp RPAREN TIMES BY STEP exp:e COLON START exp_list:el error
           {:
               System.out.println("Missing END");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS IDENTIFIER:i COLON START exp_list:el END
           {:
               Codes.Foreach foreachExp = new Codes.Foreach();
               Codes.Identifier id = new Codes.Identifier();
               id.setName(i);
               foreachExp.setTemp(id);
               foreachExp.setCollection((Codes.Code)e);
               foreachExp.setCodes((List<Codes.Code>)el);
               RESULT = foreachExp;
           :} |
           LOOP error EACH ITEM IN exp:e AS IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing FOR");
           :} |
           LOOP FOR error ITEM IN exp:e AS IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing EACH");
           :} |
           LOOP FOR EACH error IN exp:e AS IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing ITEM");
           :} |
           LOOP FOR EACH ITEM error exp:e AS IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing IN");
           :} |
           LOOP FOR EACH ITEM IN error AS IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing collection");
           :} |
           LOOP FOR EACH ITEM IN exp:e error IDENTIFIER:i COLON START exp_list:el END
           {:
               System.out.println("Missing AS");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS error COLON START exp_list:el END
           {:
               System.out.println("Missing Identifier");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS IDENTIFIER:i error START exp_list:el END
           {:
               System.out.println("Missing COLON");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS IDENTIFIER:i COLON error exp_list:el END
           {:
               System.out.println("Missing START");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS IDENTIFIER:i COLON START error END
           {:
               System.out.println("Missing action");
           :} |
           LOOP FOR EACH ITEM IN exp:e AS IDENTIFIER:i COLON START exp_list:el error
           {:
               System.out.println("Missing END");
           :} |
           LOOP UNTIL exp:e COLON START exp_list:el END
           {:
               Codes.While whileExp = new Codes.While();
               whileExp.setCondition((Codes.Code)e);
               whileExp.setCodes((List<Codes.Code>)el);
               RESULT = whileExp;
           :} |
           LOOP error exp:e COLON START exp_list:el END
           {:
               System.out.println("Missing UNTIL");
           :} |
           LOOP UNTIL error COLON START exp_list:el END
           {:
               System.out.println("Missing condition");
           :} |
           LOOP UNTIL exp:e error START exp_list:el END
           {:
               System.out.println("Missing COLON");
           :} |
           LOOP UNTIL exp:e COLON error exp_list:el END
           {:
               System.out.println("Missing START");
           :} |
           LOOP UNTIL exp:e COLON START error END
           {:
               System.out.println("Missing action");
           :} |
           LOOP UNTIL exp:e COLON START exp_list:el error
           {:
               System.out.println("Missing END");
           :}
;
// if ------------------------------------------------------------------------------------------------------------------
if_exp ::= IF exp:e THEN COLON START exp_list:el END
           elseif_exp:eie
           {:
               Codes.If ifExp = new Codes.If();
               ifExp.setCondition((Codes.Code)e);
               ifExp.setCodes((List<Codes.Code>)el);
               List<Codes.Code> extras = new ArrayList<Codes.Code>();
               extras.addAll((List<Codes.ElseIf>)eie);
               ifExp.setExtras(extras);
               RESULT = ifExp;
           :} |
           IF error THEN COLON START exp_list:el END
           elseif_exp
           {:
               System.out.println("Missing condition");
           :} |
           IF exp:e error COLON START exp_list:el END
           elseif_exp
           {:
               System.out.println("Missing THEN");
           :} |
           IF exp:e THEN error START exp_list:el END
           elseif_exp
           {:
               System.out.println("Missing COLON");
           :} |
           IF exp:e THEN COLON error exp_list:el END
           elseif_exp
           {:
               System.out.println("Missing START");
           :} |
           IF exp:e THEN COLON START exp_list:el error
           elseif_exp
           {:
               System.out.println("Missing END");
           :} |
           IF exp:e COLON START case_list:cl END
           {:
               Codes.Switch switchExp = new Codes.Switch();
               switchExp.setValue((Codes.Code)e);
               switchExp.setCases((List<Codes.Case>)cl);
               RESULT = switchExp;
           :} |
           IF error COLON START case_list:cl END
           {:
               System.out.println("Missing Identifier");
           :} |
           IF exp:e error START case_list:cl END
           {:
               System.out.println("Missing COLON");
           :} |
           IF exp:e COLON error case_list:cl END
           {:
               System.out.println("Missing START");
           :} |
           IF exp:e COLON START case_list:cl error
           {:
               System.out.println("Missing END");
           :}
;
elseif_exp ::=
           ELSE IF exp:e2 THEN COLON START exp_list:el2 END elseif_exp:eie
           {:
               List<Codes.ElseIf> elseIfs = (List<Codes.ElseIf>)eie;
               Codes.ElseIf elseIfExp = new Codes.ElseIf();
               elseIfExp.setCondition((Codes.Code)e2);
               elseIfExp.setCodes((List<Codes.Code>)el2);
               elseIfs.add(elseIfExp);
               RESULT = elseIfs;
           :} |
           {:
               RESULT = new ArrayList<Codes.ElseIf>();
           :} |
           ELSE error exp:e2 THEN COLON START exp_list:el2 END elseif_exp
           {:
               System.out.println("Missing IF");
           :} |
           ELSE IF exp:e2 error COLON START exp_list:el2 END elseif_exp
           {:
               System.out.println("Missing THEN");
           :} |
           ELSE IF exp:e2 THEN error START exp_list:el2 END elseif_exp
           {:
               System.out.println("Missing COLON");
           :} |
           ELSE IF exp:e2 THEN COLON error exp_list:el2 END elseif_exp
           {:
               System.out.println("Missing START");
           :} |
           ELSE IF exp:e2 THEN COLON START exp_list:el2 error elseif_exp
           {:
               System.out.println("Missing END");
           :}
;
case_list ::= case_list:cl IS exp:e COLON START exp_list:el END
               {:
                   List<Codes.Case> cases = (List<Codes.Case>)cl;
                   Codes.Case caseExp = new Codes.Case();
                   caseExp.setValue((Codes.Code)e);
                   caseExp.setCodes((List<Codes.Code>)el);
                   cases.add(caseExp);
                   RESULT = cases;
               :} |
              IS exp:e COLON START exp_list:el END
               {:
                   Codes.Case caseExp = new Codes.Case();
                   caseExp.setValue((Codes.Code)e);
                   caseExp.setCodes((List<Codes.Code>)el);
                   RESULT = caseExp;
               :} |
              case_list:cl error exp:e COLON START exp_list:el END
               {:
                   System.out.println("Missing IS");
               :} |
              case_list:cl IS error COLON START exp_list:el END
               {:
                   System.out.println("Missing Is value");
               :} |
              case_list:cl IS exp:e error START exp_list:el END
               {:
                   System.out.println("Missing COLON");
               :} |
              case_list:cl IS exp:e COLON error exp_list:el END
               {:
                   System.out.println("Missing START");
               :} |
              case_list:cl IS exp:e COLON START error END
               {:
                   System.out.println("Missing action");
               :} |
              case_list:cl IS exp:e COLON START exp_list:el error
               {:
                   System.out.println("Missing END");
               :} |
              IS error COLON START exp_list:el END
               {:
                   System.out.println("Missing Is value");
               :} |
              IS exp:e error START exp_list:el END
               {:
                   System.out.println("Missing COLON");
               :} |
              IS exp:e COLON error exp_list:el END
               {:
                   System.out.println("Missing START");
               :} |
              IS exp:e COLON START error END
               {:
                   System.out.println("Missing action");
               :} |
              IS exp:e COLON START exp_list:el error
               {:
                   System.out.println("Missing END");
               :}
;
// math ----------------------------------------------------------------------------------------------------------------
param_list ::= param:p
                 {:
                     List<Codes.As> asList = new ArrayList<Codes.As>();
                     asList.add((Codes.As)p);
                     RESULT = asList;
                 :} |
               param:p COMMA param_list:pl
                 {:
                     List<Codes.As> asList = (List<Codes.As>)pl;
                     asList.add((Codes.As)p);
                     RESULT = asList;
                 :} |
               param COMMA error
                 {:
                     System.out.println("Missing param");
                 :}
;
param ::= exp:e AS IDENTIFIER:i
                 {:
                     Codes.As asExp = new Codes.As();
                     asExp.setCode1((Codes.Code)e);
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName(i);
                     asExp.setId(id);
                     RESULT = asExp;
                 :} |
          exp error IDENTIFIER
                 {:
                     System.out.println("Missing AS");
                 :} |
          exp AS error
                 {:
                     System.out.println("Missing operand");
                 :}
;
exp ::= CONDITIONS LBRACKET exp_comma_list:ecl RBRACKET ARE SATISFIED
                 {:
                     List<Codes.Code> exps = (List<Codes.Code>)ecl;
                     Codes.Code f;
                     if (exps.size() == 1)
                         f = exps.get(0);
                     else {
                         Codes.MathExpAnd andExp = new Codes.MathExpAnd();
                         andExp.setValue1(exps.get(0));
                         andExp.setValue2(exps.get(1));
                         exps.remove(0);
                         exps.remove(1);
                         while (exps.size() > 0) {
                             andExp.setValue1(andExp);
                             andExp.setValue2(exps.get(0));
                             exps.remove(0);
                         }
                         f = andExp;
                     }
                     RESULT = f;
                 :} |
        CONDITIONS error exp_comma_list:ecl RBRACKET ARE SATISFIED
                 {:
                     System.out.println("Missing LBRACKET");
                 :} |
        CONDITIONS LBRACKET error RBRACKET ARE SATISFIED
                 {:
                     System.out.println("Missing conditions list");
                 :} |
        CONDITIONS LBRACKET exp_comma_list:ecl RBRACKET error SATISFIED
                 {:
                     System.out.println("Missing ARE");
                 :} |
        CONDITIONS LBRACKET exp_comma_list:ecl RBRACKET ARE error
                 {:
                     System.out.println("Missing SATISFIED");
                 :} |
        NOT SATISFIED
                 {:
                     RESULT = new Codes.NotSatisfied();
                 :} |
        NOT error
                 {:
                     System.out.println("Missing operand");
                 :} |
        compare_concat_exp:e
                 {:
                     RESULT = (Codes.Code)e;
                 :} |
        comparing_exp:e
                 {:
                     RESULT = (Codes.Code)e;
                 :} |
        of_exp:e
                 {:
                     RESULT = (Codes.Code)e;
                 :} |
        exp:e ON exp:e2
                 {:
                     Codes.On on = new Codes.On();
                     on.setCode1((Codes.Code)e);
                     on.setCode2((Codes.Code)e2);
                     RESULT = on;
                 :} |
        exp:e ON error
                 {:
                     System.out.println("Missing operand");
                 :} |
        operation_exp:e
                 {:
                     RESULT = (Codes.Code)e;
                 :} |
        LPAREN exp:e RPAREN
                 {:
                     Codes.Parenthesis p = new Codes.Parenthesis();
                     p.setCode((Codes.Code)e);
                     RESULT = p;
                 :} |
        LPAREN exp error:e
                 {:
                     System.out.println("Missing RPAREN");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i id_comma_list:icl DOING COLON START exp_list:el END
                 {:
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     List<Codes.Identifier> params = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName(i);
                     params.add(id);
                     params.addAll((List<Codes.Identifier>)icl);
                     func.setParams(params);
                     RESULT = func;
                 :} |
        FUNCTION error PARAMS IDENTIFIER:i id_comma_list:ecl DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing WITH");
                 :} |
        FUNCTION WITH error IDENTIFIER:i id_comma_list:ecl DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing PARAMS");
                 :} |
        FUNCTION WITH PARAMS error id_comma_list:ecl DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing identifier");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i error DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing params list");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i id_comma_list:ecl error COLON START exp_list:el END
                 {:
                     System.out.println("Missing DOING");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i id_comma_list:ecl DOING error START exp_list:el END
                 {:
                     System.out.println("Missing COLON");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i id_comma_list:ecl DOING COLON error exp_list:el END
                 {:
                     System.out.println("Missing START");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i id_comma_list:ecl DOING COLON START exp_list:el error
                 {:
                     System.out.println("Missing END");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i DOING COLON START exp_list:el END
                 {:
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     List<Codes.Identifier> params = new ArrayList<Codes.Identifier>();
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName(i);
                     params.add(id);
                     func.setParams(params);
                     RESULT = func;
                 :} |
        FUNCTION error PARAMS IDENTIFIER:i DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing WITH");
                 :} |
        FUNCTION WITH error IDENTIFIER:i DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing PARAMS");
                 :} |
        FUNCTION WITH PARAMS error DOING COLON START exp_list:el END
                 {:
                     System.out.println("Missing identifier");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i error COLON START exp_list:el END
                 {:
                     System.out.println("Missing DOING");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i DOING error START exp_list:el END
                 {:
                     System.out.println("Missing COLON");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i DOING COLON error exp_list:el END
                 {:
                     System.out.println("Missing START");
                 :} |
        FUNCTION WITH PARAMS IDENTIFIER:i DOING COLON START exp_list:el error
                 {:
                     System.out.println("Missing END");
                 :} |
        FUNCTION DOING COLON START exp_list:el END
                 {:
                     Codes.Function func = new Codes.Function();
                     func.setName("");
                     func.setParams(new ArrayList<Codes.Identifier>());
                     func.setCodes((List<Codes.Code>)el);
                 :} |
        FUNCTION error COLON START exp_list:el END
                 {:
                     System.out.println("Missing DOING");
                 :} |
        FUNCTION DOING error START exp_list:el END
                 {:
                     System.out.println("Missing COLON");
                 :} |
        FUNCTION DOING COLON error exp_list:el END
                 {:
                     System.out.println("Missing START");
                 :} |
        FUNCTION DOING COLON START exp_list:el error
                 {:
                     System.out.println("Missing END");
                 :} |
        NEW INSTANCE OF exp:e instance_props:ip
              {:
                  Codes.Instantiate instantiate = new Codes.Instantiate();
                  instantiate.setClassReference((Codes.Code)e);
                  instantiate.setEntries((Hashtable<String, Codes.Code>)ip);
                  RESULT = instantiate;
              :} |
        NEW error OF exp:e instance_props
              {:
                  System.out.println("Mssing INSTANCE");
              :} |
        NEW INSTANCE error exp:e instance_props
              {:
                  System.out.println("Mssing OF");
              :} |
        DO exp:e BY ARGS param_list:pl
                 {:
                     Codes.Call call = new Codes.Call();
                     call.setFuncReference((Codes.Code)e);
                     Hashtable<String, Codes.Code> ps = new Hashtable<String, Codes.Code>();
                     for (Codes.As asExp : (List<Codes.As>)pl)
                         ps.put(asExp.getId().getName(), asExp.getCode1());
                     call.setEntries(ps);
                     RESULT = call;
                     if (e instanceof Codes.Identifier) {
                         HashSet<String> expected = null;
                         for (int counter = 0; counter < funcs.size(); counter++) {
                             expected = funcs.get(counter).get(((Codes.Identifier)e).getName());
                             if (expected != null) break;
                         }
                         if (expected == null) {
                             System.out.println("Existance Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : function not defined.");
                             System.out.println("function named " + ((Codes.Identifier)e).getName() + " does not exist.");
                         } else {
                             List<String> actual = new ArrayList<String>(ps.keySet());
                             HashSet<String> expectedCopy = new HashSet<String>(expected);
                             int size = actual.size();
                             for (int counter = 0; counter < size; counter++) {
                                 if (expectedCopy.contains(actual.get(0))) {
                                     expectedCopy.remove(actual.get(0));
                                     actual.remove(0);
                                 } else {
                                     break;
                                 }
                             }

                             if (actual.size() > 0 || expectedCopy.size() > 0) {
                                 System.out.println("Argument Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : function arguments count does not match with defined input structure.");
                                 System.out.println("About function " + ((Codes.Identifier)e).getName() + " arguments does not match in key name or key count.");
                             }
                         }
                     }
                 :} |
        DO exp:e
                 {:
                     Codes.Call call = new Codes.Call();
                     call.setFuncReference((Codes.Code)e);
                     call.setEntries(new Hashtable<String, Codes.Code>());
                     RESULT = call;
                     if (e instanceof Codes.Identifier) {
                         HashSet<String> expected = null;
                         for (int counter = 0; counter < funcs.size(); counter++) {
                             expected = funcs.get(counter).get(((Codes.Identifier)e).getName());
                             if (expected != null) break;
                         }
                         if (expected == null) {
                             System.out.println("Existance Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : function not defined.");
                             System.out.println("function named " + ((Codes.Identifier)e).getName() + " does not exist.");
                         } else {
                             if (expected.size() > 0) {
                                 System.out.println("Argument Error [ line : " + (currentLine - 1) + ", column : " + currentColumn + " ] : function arguments count does not match with defined input structure.");
                             }
                         }
                     }
                 :} |
        DO error
                 {:
                     System.out.println("missing identifier");
                 :} |
        DO error BY ARGS param_list
                 {:
                     System.out.println("missing identifier");
                 :} |
        DO exp:e error ARGS param_list
                 {:
                     System.out.println("missing BY");
                 :} |
        DO exp:e BY error param_list
                 {:
                     System.out.println("missing ARGS");
                 :} |
        DO exp:e BY ARGS error
                 {:
                     System.out.println("missing arguments list");
                 :} |
        value_exp:ve
                 {:
                     RESULT = (Codes.Code)ve;
                 :}
;
instance_props ::=
           BY PROPS param_list:pl
                 {:
                     Hashtable<String, Codes.Code> ps = new Hashtable<String, Codes.Code>();
                     for (Codes.As asExp : (List<Codes.As>)pl)
                         ps.put(asExp.getId().getName(), asExp.getCode1());
                     RESULT = ps;
                 :} |
                 {:
                     RESULT = new Hashtable<String, Codes.Code>();
                 :}
;
of_exp ::= exp:e OF exp:e2
                 {:
                     Codes.Of r = new Codes.Of();
                     r.setCode1((Codes.Code)e);
                     r.setCode2((Codes.Code)e2);
                     RESULT = r;
                 :} |
           exp OF error
                 {:
                     System.out.println("Missing operand");
                 :}
;
compare_concat_exp ::=
        exp:e1 AND exp:e2
                 {:
                     Codes.MathExpAnd r = new Codes.MathExpAnd();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp AND error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 OR exp:e2
                 {:
                     Codes.MathExpOr r = new Codes.MathExpOr();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp OR error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 IS exp:e2
                 {:
                     Codes.Is r = new Codes.Is();
                     r.setCode1((Codes.Code)e1);
                     r.setCode2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp IS error:e
                 {:
                     System.out.println("Missing Operand");
                 :}
;
value_exp ::=
        array:a
                 {:
                     RESULT = (Codes.Code)a;
                 :} |
        IDENTIFIER:i
                 {:
                     Codes.Identifier id = new Codes.Identifier();
                     id.setName((String)i);
                     RESULT = id;
                 :} |
        NUMBER:n
                 {:
                     Codes.Value v = new Codes.Value();
                     v.setValue((Double)n);
                     RESULT = v;
                 :} |
        STRING:s
                 {:
                     Codes.Value v = new Codes.Value();
                     v.setValue((String)s);
                     RESULT = v;
                 :} |
        TRUE
                 {:
                     Codes.Value v = new Codes.Value();
                     v.setValue(true);
                     RESULT = v;
                 :} |
        FALSE
                 {:
                     Codes.Value v = new Codes.Value();
                     v.setValue(false);
                     RESULT = v;
                 :} |
        EMPTY
                 {:
                     Codes.Value v = new Codes.Value();
                     v.setValue(null);
                     RESULT = v;
                 :}
;
operation_exp ::=
        exp:e1 SUM exp:e2
                 {:
                     Codes.MathExpSum r = new Codes.MathExpSum();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp SUM error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 SUBTRACT exp:e2
                 {:
                     Codes.MathExpSubstract r = new Codes.MathExpSubstract();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp SUBTRACT error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 MULTIPLY exp:e2
                 {:
                     Codes.MathExpMultiply r = new Codes.MathExpMultiply();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp MULTIPLY error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 DIVISION exp:e2
                 {:
                     Codes.MathExpDivide r = new Codes.MathExpDivide();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp DIVISION error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 MOD exp:e2
                 {:
                     Codes.MathExpMod r = new Codes.MathExpMod();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp MOD error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 POWER exp:e2
                 {:
                     Codes.MathExpPower r = new Codes.MathExpPower();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp POWER error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        SUBTRACT exp:e
                 {:
                     Codes.MathExpUminus r = new Codes.MathExpUminus();
                     r.setValue((Codes.Code)e);
                     RESULT = r;
                 :} %prec UMINUS |
        SUBTRACT error:e
                 {:
                     System.out.println("Missing data after UMINUS");
                 :}
;
comparing_exp ::=
        exp:e1 EQUAL exp:e2
                 {:
                     Codes.MathExpEqual r = new Codes.MathExpEqual();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp EQUAL error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 GE exp:e2
                 {:
                     Codes.MathExpGE r = new Codes.MathExpGE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp GE error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 GT exp:e2
                 {:
                     Codes.MathExpGT r = new Codes.MathExpGT();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp GT error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 LT exp:e2
                 {:
                     Codes.MathExpLT r = new Codes.MathExpLT();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp LT error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 LE exp:e2
                 {:
                     Codes.MathExpLE r = new Codes.MathExpLE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp LE error:e
                 {:
                     System.out.println("Missing Operand");
                 :} |
        exp:e1 NE exp:e2
                 {:
                     Codes.MathExpNE r = new Codes.MathExpNE();
                     r.setValue1((Codes.Code)e1);
                     r.setValue2((Codes.Code)e2);
                     RESULT = r;
                 :} |
        exp NE error:e
                 {:
                     System.out.println("Missing Operand");
                 :}
;
array ::= LBRACKET exp_comma_list:ecl RBRACKET
             {:
                 Codes.Array array = new Codes.Array();
                 array.setItems(((List<Codes.Code>)ecl));
                 RESULT = array;
             :}
;
id_comma_list ::=
             COMMA IDENTIFIER:i id_comma_list:icl
             {:
                 List<Codes.Identifier> ids = ((List<Codes.Identifier>) icl);
                 Codes.Identifier id = new Codes.Identifier();
                 id.setName((String)i);
                 ids.add(id);
                 RESULT = ids;
             :} |
             COMMA IDENTIFIER:i
             {:
                 List<Codes.Code> ids = new ArrayList<Codes.Code>();
                 Codes.Identifier id = new Codes.Identifier();
                 id.setName((String)i);
                 ids.add(id);
                 RESULT = ids;
             :} |
             error IDENTIFIER id_comma_list
             {:

             :} |
             COMMA error id_comma_list
             {:

             :}
;
exp_comma_list ::=
             exp:e COMMA exp_comma_list:ecl
             {:
                 List<Codes.Code> exps = (List<Codes.Code>)ecl;
                 exps.add((Codes.Code) e);
                 RESULT = exps;
             :} |
             exp:e COMMA error
             {:
                 System.out.println("Missing expression after comma");
             :} |
             exp:e
             {:
                 List<Codes.Code> exps = new ArrayList<Codes.Code>();
                 exps.add((Codes.Code)e);
                 RESULT = exps;
             :}
;