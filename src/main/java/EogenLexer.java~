/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>EogenCompiler.flex</tt>
 */
public class EogenLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\17\1\3\1\2\1\0\1\3\1\1\16\17\4\0\1\3\1\36"+
    "\1\37\1\0\1\16\2\0\1\12\1\25\1\26\1\5\1\23\1\33"+
    "\1\15\1\13\1\4\1\6\3\7\4\7\2\7\1\32\1\31\1\35"+
    "\1\22\1\34\2\0\4\11\1\14\1\11\6\16\1\60\2\16\1\61"+
    "\3\16\1\62\3\16\1\10\1\63\1\16\1\20\1\12\1\21\1\24"+
    "\1\16\1\0\1\40\1\66\1\56\1\50\1\46\1\51\1\42\1\54"+
    "\1\44\1\70\1\73\1\65\1\47\1\52\1\57\1\55\1\16\1\41"+
    "\1\43\1\45\1\64\1\72\1\53\1\71\1\67\1\16\1\27\1\0"+
    "\1\30\1\0\41\17\2\0\4\16\4\0\1\16\2\0\1\17\7\0"+
    "\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0\u01ca\16\4\0"+
    "\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0\160\17\5\16"+
    "\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16\1\0\3\16"+
    "\1\0\1\16\1\0\24\16\1\0\123\16\1\0\213\16\1\0\5\17"+
    "\2\0\246\16\1\0\46\16\2\0\1\16\7\0\47\16\7\0\1\16"+
    "\1\0\55\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\1\17"+
    "\10\0\33\16\5\0\3\16\15\0\6\17\5\0\1\16\4\0\13\17"+
    "\1\0\1\17\3\0\53\16\37\17\4\0\2\16\1\17\143\16\1\0"+
    "\1\16\10\17\1\0\6\17\2\16\2\17\1\0\4\17\2\16\12\17"+
    "\3\16\2\0\1\16\17\0\1\17\1\16\1\17\36\16\33\17\2\0"+
    "\131\16\13\17\1\16\16\0\12\17\41\16\11\17\2\16\4\0\1\16"+
    "\5\0\26\16\4\17\1\16\11\17\1\16\3\17\1\16\5\17\22\0"+
    "\31\16\3\17\4\0\13\16\65\0\25\16\1\0\10\16\26\0\60\17"+
    "\66\16\3\17\1\16\22\17\1\16\7\17\12\16\2\17\2\0\12\17"+
    "\1\0\20\16\3\17\1\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\1\16\3\0\4\16\2\0\1\17\1\16\7\17\2\0"+
    "\2\17\2\0\3\17\1\16\10\0\1\17\4\0\2\16\1\0\3\16"+
    "\2\17\2\0\12\17\4\16\7\0\2\16\4\0\3\17\1\0\6\16"+
    "\4\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0\2\16"+
    "\1\0\2\16\2\0\1\17\1\0\5\17\4\0\2\17\2\0\3\17"+
    "\3\0\1\17\7\0\4\16\1\0\1\16\7\0\14\17\3\16\1\17"+
    "\13\0\3\17\1\0\11\16\1\0\3\16\1\0\26\16\1\0\7\16"+
    "\1\0\2\16\1\0\5\16\2\0\1\17\1\16\10\17\1\0\3\17"+
    "\1\0\3\17\2\0\1\16\17\0\2\16\2\17\2\0\12\17\1\0"+
    "\1\16\7\0\1\16\6\17\1\0\3\17\1\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0\1\17"+
    "\1\16\7\17\2\0\2\17\2\0\3\17\10\0\2\17\4\0\2\16"+
    "\1\0\3\16\2\17\2\0\12\17\1\0\1\16\20\0\1\17\1\16"+
    "\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0\1\16"+
    "\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\4\0\5\17"+
    "\3\0\3\17\1\0\4\17\2\0\1\16\6\0\1\17\16\0\12\17"+
    "\11\0\1\16\6\0\4\17\1\0\10\16\1\0\3\16\1\0\27\16"+
    "\1\0\20\16\3\0\1\16\7\17\1\0\3\17\1\0\4\17\7\0"+
    "\2\17\1\0\3\16\5\0\2\16\2\17\2\0\12\17\20\0\1\16"+
    "\3\17\1\0\10\16\1\0\3\16\1\0\27\16\1\0\12\16\1\0"+
    "\5\16\2\0\1\17\1\16\7\17\1\0\3\17\1\0\4\17\7\0"+
    "\2\17\7\0\1\16\1\0\2\16\2\17\2\0\12\17\1\0\2\16"+
    "\15\0\4\17\1\0\10\16\1\0\3\16\1\0\51\16\2\17\1\16"+
    "\7\17\1\0\3\17\1\0\4\17\1\16\5\0\3\16\1\17\7\0"+
    "\3\16\2\17\2\0\12\17\12\0\6\16\2\0\2\17\1\0\22\16"+
    "\3\0\30\16\1\0\11\16\1\0\1\16\2\0\7\16\3\0\1\17"+
    "\4\0\6\17\1\0\1\17\1\0\10\17\6\0\12\17\2\0\2\17"+
    "\15\0\60\16\1\17\2\16\7\17\4\0\10\16\10\17\1\0\12\17"+
    "\47\0\2\16\1\0\1\16\2\0\2\16\1\0\1\16\2\0\1\16"+
    "\6\0\4\16\1\0\7\16\1\0\3\16\1\0\1\16\1\0\1\16"+
    "\2\0\2\16\1\0\4\16\1\17\2\16\6\17\1\0\2\17\1\16"+
    "\2\0\5\16\1\0\1\16\1\0\6\17\2\0\12\17\2\0\4\16"+
    "\40\0\1\16\27\0\2\17\6\0\12\17\13\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\2\17\10\16\1\0\44\16\4\0\24\17\1\0"+
    "\2\17\5\16\13\17\1\0\44\17\11\0\1\17\71\0\53\16\24\17"+
    "\1\16\12\17\6\0\6\16\4\17\4\16\3\17\1\16\3\17\2\16"+
    "\7\17\3\16\4\17\15\16\14\17\1\16\17\17\2\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\53\16\1\0\u014d\16\1\0\4\16\2\0"+
    "\7\16\1\0\1\16\1\0\4\16\2\0\51\16\1\0\4\16\2\0"+
    "\41\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0"+
    "\17\16\1\0\71\16\1\0\4\16\2\0\103\16\2\0\3\17\40\0"+
    "\20\16\20\0\126\16\2\0\6\16\3\0\u026c\16\2\0\21\16\1\0"+
    "\32\16\5\0\113\16\3\0\13\16\7\0\15\16\1\0\4\16\3\17"+
    "\13\0\22\16\3\17\13\0\22\16\2\17\14\0\15\16\1\0\3\16"+
    "\1\0\2\17\14\0\64\16\40\17\3\0\1\16\3\0\2\16\1\17"+
    "\2\0\12\17\41\0\4\17\1\0\12\17\6\0\130\16\10\0\5\16"+
    "\2\17\42\16\1\17\1\16\5\0\106\16\12\0\37\16\1\0\14\17"+
    "\4\0\14\17\12\0\12\17\36\16\2\0\5\16\13\0\54\16\4\0"+
    "\32\16\6\0\12\17\46\0\27\16\5\17\4\0\65\16\12\17\1\0"+
    "\35\17\2\0\13\17\6\0\12\17\15\0\1\16\10\0\16\17\102\0"+
    "\5\17\57\16\21\17\7\16\4\0\12\17\21\0\11\17\14\0\3\17"+
    "\36\16\15\17\2\16\12\17\54\16\16\17\14\0\44\16\24\17\10\0"+
    "\12\17\3\0\3\16\12\17\44\16\2\0\11\16\107\0\3\17\1\0"+
    "\25\17\4\16\1\17\4\16\3\17\2\16\3\17\6\0\300\16\72\17"+
    "\1\0\5\17\u0116\16\2\0\6\16\2\0\46\16\2\0\6\16\2\0"+
    "\10\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\37\16\2\0"+
    "\65\16\1\0\7\16\1\0\1\16\3\0\3\16\1\0\7\16\3\0"+
    "\4\16\2\0\6\16\4\0\15\16\5\0\3\16\1\0\7\16\16\0"+
    "\5\17\32\0\5\17\20\0\2\16\23\0\1\16\13\0\5\17\1\0"+
    "\12\17\1\0\1\16\15\0\1\16\20\0\15\16\3\0\40\16\20\0"+
    "\15\17\4\0\1\17\3\0\14\17\21\0\1\16\4\0\1\16\2\0"+
    "\12\16\1\0\1\16\3\0\5\16\6\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\0\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0"+
    "\1\16\21\0\51\16\u0a77\0\57\16\1\0\57\16\1\0\205\16\6\0"+
    "\4\16\3\17\2\16\14\0\46\16\1\0\1\16\5\0\1\16\2\0"+
    "\70\16\7\0\1\16\17\0\1\17\27\16\11\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\40\17\57\0\1\16\u01d5\0\3\16\31\0\11\16"+
    "\6\17\1\0\5\16\2\0\5\16\4\0\126\16\2\0\2\17\2\0"+
    "\3\16\1\0\132\16\1\0\4\16\5\0\52\16\2\0\136\16\21\0"+
    "\33\16\65\0\20\16\u0200\0\u19b6\16\112\0\u51eb\16\25\0\u048d\16\103\0"+
    "\56\16\2\0\u010d\16\3\0\20\16\12\17\2\16\24\0\57\16\1\17"+
    "\4\0\12\17\1\0\37\16\2\17\120\16\2\17\45\0\11\16\2\0"+
    "\147\16\2\0\44\16\1\0\10\16\77\0\13\16\1\17\3\16\1\17"+
    "\4\16\1\17\27\16\5\17\20\0\1\16\7\0\64\16\14\0\2\17"+
    "\62\16\22\17\12\0\12\17\6\0\22\17\6\16\3\0\1\16\1\0"+
    "\1\16\2\0\12\17\34\16\10\17\2\0\27\16\15\17\14\0\35\16"+
    "\3\0\4\17\57\16\16\17\16\0\1\16\12\17\6\0\5\16\1\17"+
    "\12\16\12\17\5\16\1\0\51\16\16\17\11\0\3\16\1\17\10\16"+
    "\2\17\2\0\12\17\6\0\27\16\3\0\1\16\3\17\62\16\1\17"+
    "\1\16\3\17\2\16\2\17\5\16\2\17\1\16\1\17\1\16\30\0"+
    "\3\16\2\0\13\16\5\17\2\0\3\16\2\17\12\0\6\16\2\0"+
    "\6\16\2\0\6\16\11\0\7\16\1\0\7\16\1\0\53\16\1\0"+
    "\12\16\12\0\163\16\10\17\1\0\2\17\2\0\12\17\6\0\u2ba4\16"+
    "\14\0\27\16\4\0\61\16\u2104\0\u016e\16\2\0\152\16\46\0\7\16"+
    "\14\0\5\16\5\0\1\16\1\17\12\16\1\0\15\16\1\0\5\16"+
    "\1\0\1\16\1\0\2\16\1\0\2\16\1\0\154\16\41\0\u016b\16"+
    "\22\0\100\16\2\0\66\16\50\0\15\16\3\0\20\17\20\0\20\17"+
    "\3\0\2\16\30\0\3\16\31\0\1\16\6\0\5\16\1\0\207\16"+
    "\2\0\1\17\4\0\1\16\13\0\12\17\7\0\32\16\4\0\1\16"+
    "\1\0\32\16\13\0\131\16\3\0\6\16\2\0\6\16\2\0\6\16"+
    "\2\0\3\16\3\0\2\16\3\0\2\16\22\0\3\17\4\0\14\16"+
    "\1\0\32\16\1\0\23\16\1\0\2\16\1\0\17\16\2\0\16\16"+
    "\42\0\173\16\105\0\65\16\210\0\1\17\202\0\35\16\3\0\61\16"+
    "\17\0\1\17\37\0\40\16\15\0\36\16\5\0\46\16\5\17\5\0"+
    "\36\16\2\0\44\16\4\0\10\16\1\0\5\16\52\0\236\16\2\0"+
    "\12\17\6\0\44\16\4\0\44\16\4\0\50\16\10\0\64\16\234\0"+
    "\u0137\16\11\0\26\16\12\0\10\16\230\0\6\16\2\0\1\16\1\0"+
    "\54\16\1\0\2\16\3\0\1\16\2\0\27\16\12\0\27\16\11\0"+
    "\37\16\101\0\23\16\1\0\2\16\12\0\26\16\12\0\32\16\106\0"+
    "\70\16\6\0\2\16\100\0\1\16\3\17\1\0\2\17\5\0\4\17"+
    "\4\16\1\0\3\16\1\0\33\16\4\0\3\17\4\0\1\17\40\0"+
    "\35\16\3\0\35\16\43\0\10\16\1\0\34\16\2\17\31\0\66\16"+
    "\12\0\26\16\12\0\23\16\15\0\22\16\156\0\111\16\67\0\63\16"+
    "\15\0\63\16\u030d\0\3\17\65\16\17\17\37\0\12\17\17\0\4\17"+
    "\55\16\13\17\2\0\1\17\22\0\31\16\7\0\12\17\6\0\3\17"+
    "\44\16\16\17\1\0\12\17\20\0\43\16\1\17\2\0\1\16\11\0"+
    "\3\17\60\16\16\17\4\16\5\0\3\17\3\0\12\17\1\16\1\0"+
    "\1\16\43\0\22\16\1\0\31\16\14\17\6\0\1\17\101\0\7\16"+
    "\1\0\1\16\1\0\4\16\1\0\17\16\1\0\12\16\7\0\57\16"+
    "\14\17\5\0\12\17\6\0\4\17\1\0\10\16\2\0\2\16\2\0"+
    "\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0\1\17\1\16"+
    "\7\17\2\0\2\17\2\0\3\17\2\0\1\16\6\0\1\17\5\0"+
    "\5\16\2\17\2\0\7\17\3\0\5\17\213\0\65\16\22\17\4\16"+
    "\5\0\12\17\46\0\60\16\24\17\2\16\1\0\1\16\10\0\12\17"+
    "\246\0\57\16\7\17\2\0\11\17\27\0\4\16\2\17\42\0\60\16"+
    "\21\17\3\0\1\16\13\0\12\17\46\0\53\16\15\17\10\0\12\17"+
    "\66\0\32\16\3\0\17\17\4\0\12\17\u0166\0\100\16\12\17\25\0"+
    "\1\16\u0100\0\1\16\12\17\50\16\7\17\1\16\4\17\10\0\1\17"+
    "\10\0\1\16\13\17\50\16\2\0\4\16\20\17\46\0\71\16\u0107\0"+
    "\11\16\1\0\45\16\10\17\1\0\10\17\1\16\17\0\12\17\30\0"+
    "\36\16\2\0\26\17\1\0\16\17\111\0\7\16\1\0\2\16\1\0"+
    "\46\16\6\17\3\0\1\17\1\0\2\17\1\0\7\17\1\16\1\17"+
    "\10\0\12\17\u02a6\0\u039a\16\146\0\157\16\21\0\304\16\u0abc\0\u042f\16"+
    "\u0fd1\0\u0247\16\u21b9\0\u0239\16\7\0\37\16\1\0\12\17\146\0\36\16"+
    "\2\0\5\17\13\0\60\16\7\17\11\0\4\16\14\0\12\17\11\0"+
    "\25\16\5\0\23\16\u0370\0\105\16\13\0\1\16\56\17\20\0\4\17"+
    "\15\16\100\0\2\16\36\0\u17ed\16\23\0\u02f3\16\u250d\0\u011f\16\121\0"+
    "\u018c\16\u0904\0\153\16\5\0\15\16\3\0\11\16\7\0\12\16\3\0"+
    "\2\17\1\0\4\17\u14c1\0\5\17\3\0\26\17\2\0\7\17\36\0"+
    "\4\17\224\0\3\17\u01bb\0\125\16\1\0\107\16\1\0\2\16\2\0"+
    "\1\16\2\0\2\16\2\0\4\16\1\0\14\16\1\0\1\16\1\0"+
    "\7\16\1\0\101\16\1\0\4\16\2\0\10\16\1\0\7\16\1\0"+
    "\34\16\1\0\4\16\1\0\5\16\1\0\1\16\3\0\7\16\1\0"+
    "\u0154\16\2\0\31\16\1\0\31\16\1\0\37\16\1\0\31\16\1\0"+
    "\37\16\1\0\31\16\1\0\37\16\1\0\31\16\1\0\37\16\1\0"+
    "\31\16\1\0\10\16\2\0\62\17\u0200\0\67\17\4\0\62\17\10\0"+
    "\1\17\16\0\1\17\26\0\5\17\1\0\17\17\u0550\0\7\17\1\0"+
    "\21\17\2\0\7\17\1\0\2\17\1\0\5\17\u07d5\0\305\16\13\0"+
    "\7\17\51\0\104\16\7\17\5\0\12\17\u04a6\0\4\16\1\0\33\16"+
    "\1\0\2\16\1\0\1\16\2\0\1\16\1\0\12\16\1\0\4\16"+
    "\1\0\1\16\1\0\1\16\6\0\1\16\4\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\0\2\16\1\0\1\16\2\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\2\16"+
    "\1\0\1\16\2\0\4\16\1\0\7\16\1\0\4\16\1\0\4\16"+
    "\1\0\1\16\1\0\12\16\1\0\21\16\5\0\3\16\1\0\5\16"+
    "\1\0\21\16\u1144\0\ua6d7\16\51\0\u1035\16\13\0\336\16\2\0\u1682\16"+
    "\16\0\u1d31\16\u0c1f\0\u021e\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\17\36\0\140\17\200\0\360\17\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\1\1\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\23\6\1\30\2\0\1\5\1\0"+
    "\1\6\1\31\1\32\1\33\1\34\1\35\1\6\1\36"+
    "\4\6\1\37\1\6\1\40\1\41\11\6\1\42\14\6"+
    "\1\43\1\44\1\45\6\6\1\46\2\6\2\30\1\0"+
    "\3\5\1\0\2\6\1\47\10\6\1\50\6\6\1\51"+
    "\3\6\1\52\2\6\1\53\1\54\20\6\1\5\1\6"+
    "\1\55\4\6\1\56\1\57\1\6\1\60\1\6\1\61"+
    "\1\62\2\6\1\63\5\6\1\64\1\6\1\65\7\6"+
    "\1\66\1\67\2\6\1\70\1\6\1\5\1\71\5\6"+
    "\1\72\1\73\1\74\1\6\1\75\1\76\1\6\1\77"+
    "\1\6\1\100\1\6\1\101\2\6\1\102\1\6\1\103"+
    "\1\104\1\6\1\105\1\5\1\106\1\107\3\6\1\110"+
    "\1\6\1\111\1\6\1\112\1\6\1\113\2\6\1\5"+
    "\7\6\1\114\1\5\1\115\1\6\1\116\1\117\3\6"+
    "\1\5\1\120\1\121\1\6\1\122\1\5\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\74\0\u012c\0\u0168"+
    "\0\u01a4\0\74\0\u01e0\0\u021c\0\u0258\0\74\0\74\0\u0294"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u02d0\0\u030c\0\u0348\0\74\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\74\0\74"+
    "\0\74\0\74\0\74\0\u0960\0\u01a4\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u01a4\0\u0a8c\0\u01a4\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u01a4\0\u01a4\0\u01a4\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u01a4\0\u1194\0\u11d0\0\u120c"+
    "\0\74\0\u1248\0\u0870\0\u1284\0\u12c0\0\u12c0\0\u12fc\0\u1338"+
    "\0\u01a4\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u01a4\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u01a4\0\u16bc\0\u16f8\0\u1734\0\u01a4\0\u1770\0\u17ac\0\u01a4"+
    "\0\u01a4\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u01a4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u01a4\0\u01a4\0\u1d10\0\u01a4\0\u1d4c\0\u01a4\0\u01a4\0\u1d88"+
    "\0\u1dc4\0\u01a4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u01a4"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u01a4\0\u01a4\0\u2148\0\u2184\0\u01a4\0\u21c0\0\u21fc"+
    "\0\u01a4\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u2364\0\u01a4\0\u01a4\0\u23a0\0\u01a4\0\u23dc\0\u01a4"+
    "\0\u2418\0\u01a4\0\u2454\0\u2490\0\u01a4\0\u24cc\0\u01a4\0\u01a4"+
    "\0\u2508\0\u01a4\0\u2544\0\u01a4\0\u01a4\0\u2580\0\u25bc\0\u25f8"+
    "\0\u01a4\0\u2634\0\u01a4\0\u2670\0\u01a4\0\u26ac\0\u01a4\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u01a4\0\u2940\0\u01a4\0\u297c\0\u01a4\0\u01a4\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u01a4\0\u01a4\0\u2aa8\0\u01a4\0\74"+
    "\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\11\1\2\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\11\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\11\1\51\1\52\1\53\4\11"+
    "\1\54\1\55\1\56\2\11\1\57\1\60\1\11\76\0"+
    "\2\4\73\0\1\4\74\0\1\61\1\62\74\0\2\10"+
    "\1\63\2\0\1\64\1\65\31\0\1\65\22\0\1\63"+
    "\10\0\2\10\3\0\1\64\1\65\31\0\1\65\33\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\34\11\6\0"+
    "\2\64\72\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\20\11\1\66\13\11\34\0\1\67\61\0\1\70\73\0"+
    "\1\71\73\0\1\72\73\0\1\73\57\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\11\1\74\1\11\1\75"+
    "\12\11\1\76\15\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\6\11\1\77\25\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\100\4\11\1\101\26\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\3\11"+
    "\1\102\1\11\1\103\3\11\1\104\1\105\21\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\1\11\1\106"+
    "\2\11\1\107\7\11\1\110\17\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\111\1\112\10\11\1\113"+
    "\12\11\1\114\6\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\17\11\1\115\14\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\6\11\1\116\10\11\1\117"+
    "\14\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\1\120\16\11\1\121\4\11\1\122\7\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\1\123\5\11\1\124"+
    "\10\11\1\125\14\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\4\11\1\126\27\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\127\1\130\32\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\1\131\16\11"+
    "\1\132\5\11\1\133\6\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\1\11\1\134\7\11\1\135\1\136"+
    "\13\11\1\137\5\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\12\11\1\140\21\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\4\11\1\141\12\11\1\142"+
    "\14\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\1\143\5\11\1\144\20\11\1\145\4\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\1\146\33\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\1\147\33\11"+
    "\1\61\1\150\1\151\71\61\5\62\1\152\66\62\6\0"+
    "\1\153\1\154\1\0\1\154\2\0\1\154\23\0\1\154"+
    "\5\0\1\154\1\0\2\154\4\0\1\154\7\0\1\154"+
    "\13\0\2\64\4\0\1\65\31\0\1\65\33\0\2\155"+
    "\5\0\1\156\5\0\1\156\56\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\21\11\1\157\12\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\2\11\1\160\3\11"+
    "\1\161\25\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\5\11\1\162\26\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\5\11\1\163\1\11\1\164\24\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\5\11"+
    "\1\165\26\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\6\11\1\166\25\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\6\11\1\167\25\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\3\11\1\170\30\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\24\11"+
    "\1\171\2\11\1\172\4\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\7\11\1\173\24\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\6\11\1\174\25\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\16\11"+
    "\1\175\15\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\1\11\1\176\32\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\16\11\1\177\15\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\3\11\1\200\30\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\10\11"+
    "\1\201\23\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\11\11\1\202\22\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\4\11\1\203\27\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\25\11\1\204\6\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\1\11"+
    "\1\205\32\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\12\11\1\206\21\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\7\11\1\207\24\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\13\11\1\210\20\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\5\11"+
    "\1\211\26\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\5\11\1\212\26\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\1\11\1\213\32\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\17\11\1\214\14\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\1\11"+
    "\1\215\3\11\1\216\16\11\1\217\7\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\12\11\1\220\21\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\1\221"+
    "\33\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\30\11\1\222\3\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\5\11\1\223\26\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\33\11\1\224\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\17\11\1\225\14\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\3\11"+
    "\1\226\30\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\14\11\1\227\17\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\12\11\1\230\21\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\25\11\1\231\6\11"+
    "\2\0\1\151\71\0\4\62\1\151\1\152\66\62\6\0"+
    "\2\232\1\0\1\232\2\0\1\232\23\0\1\232\5\0"+
    "\1\232\1\0\2\232\4\0\1\232\7\0\1\232\13\0"+
    "\2\155\72\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\22\11\1\233\11\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\3\11\1\234\30\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\4\11\1\235\27\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\24\11\1\236"+
    "\7\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\6\11\1\237\25\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\4\11\1\240\27\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\15\11\1\241\16\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\7\11\1\242"+
    "\24\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\5\11\1\243\26\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\6\11\1\244\25\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\6\11\1\245\25\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\12\11\1\246"+
    "\21\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\14\11\1\247\17\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\17\11\1\250\14\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\251\33\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\6\11\1\252\25\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\4\11"+
    "\1\253\27\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\12\11\1\254\21\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\3\11\1\255\30\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\16\11\1\256\15\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\6\11"+
    "\1\257\25\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\14\11\1\260\17\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\1\261\33\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\15\11\1\262\16\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\6\11\1\263"+
    "\25\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\16\11\1\264\15\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\2\11\1\265\31\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\10\11\1\266\23\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\3\11\1\267"+
    "\30\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\6\11\1\270\25\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\4\11\1\271\27\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\6\11\1\272\25\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\15\11\1\273"+
    "\16\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\6\11\1\274\25\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\1\275\33\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\10\11\1\276\23\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\24\11\1\277\7\11"+
    "\6\0\2\300\1\0\1\300\2\0\1\300\23\0\1\300"+
    "\5\0\1\300\1\0\2\300\4\0\1\300\7\0\1\300"+
    "\13\0\4\11\2\0\1\11\1\0\2\11\20\0\23\11"+
    "\1\301\10\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\17\11\1\302\14\11\6\0\4\11\2\0\1\11"+
    "\1\0\2\11\20\0\1\11\1\303\32\11\6\0\4\11"+
    "\2\0\1\11\1\0\2\11\20\0\7\11\1\304\24\11"+
    "\6\0\4\11\2\0\1\11\1\0\2\11\20\0\3\11"+
    "\1\305\30\11\6\0\4\11\2\0\1\11\1\0\2\11"+
    "\20\0\1\306\33\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\3\11\1\307\30\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\1\11\1\310\32\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\15\11\1\311"+
    "\16\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\12\11\1\312\21\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\2\11\1\313\31\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\6\11\1\314\25\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\5\11\1\315"+
    "\26\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\10\11\1\316\23\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\7\11\1\317\24\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\3\11\1\320\30\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\11\11\1\321"+
    "\22\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\14\11\1\322\17\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\14\11\1\323\17\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\4\11\1\324\27\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\3\11\1\325"+
    "\30\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\16\11\1\326\15\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\25\11\1\327\6\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\10\11\1\330\23\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\32\11\1\331"+
    "\1\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\6\11\1\332\25\11\6\0\2\333\1\0\1\333\2\0"+
    "\1\333\23\0\1\333\5\0\1\333\1\0\2\333\4\0"+
    "\1\333\7\0\1\333\13\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\12\11\1\334\21\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\12\11\1\335\21\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\26\11\1\336"+
    "\5\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\11\11\1\337\22\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\12\11\1\340\21\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\6\11\1\341\25\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\4\11\1\342"+
    "\27\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\3\11\1\343\30\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\24\11\1\344\7\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\5\11\1\345\26\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\5\11\1\346"+
    "\26\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\5\11\1\347\26\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\4\11\1\350\1\11\1\351\25\11\6\0"+
    "\2\352\1\0\1\352\2\0\1\352\23\0\1\352\5\0"+
    "\1\352\1\0\2\352\4\0\1\352\7\0\1\352\13\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\6\11\1\353"+
    "\25\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\4\11\1\354\27\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\16\11\1\355\15\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\17\11\1\356\14\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\25\11\1\357"+
    "\6\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\4\11\1\360\27\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\17\11\1\361\14\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\3\11\1\362\30\11\6\0"+
    "\2\363\1\0\1\363\2\0\1\363\23\0\1\363\5\0"+
    "\1\363\1\0\2\363\4\0\1\363\7\0\1\363\13\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\1\11\1\364"+
    "\32\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\6\11\1\365\25\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\6\11\1\366\25\11\6\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\12\11\1\367\21\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\25\11\1\370"+
    "\6\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\17\11\1\371\14\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\24\11\1\372\7\11\6\0\2\373\1\0"+
    "\1\373\2\0\1\373\23\0\1\373\5\0\1\373\1\0"+
    "\2\373\4\0\1\373\7\0\1\373\13\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\10\11\1\374\23\11\6\0"+
    "\4\11\2\0\1\11\1\0\2\11\20\0\27\11\1\375"+
    "\4\11\6\0\4\11\2\0\1\11\1\0\2\11\20\0"+
    "\12\11\1\376\21\11\6\0\4\11\2\0\1\11\1\0"+
    "\2\11\20\0\1\11\1\377\32\11\6\0\2\u0100\1\0"+
    "\1\u0100\2\0\1\u0100\23\0\1\u0100\5\0\1\u0100\1\0"+
    "\2\u0100\4\0\1\u0100\7\0\1\u0100\13\0\4\11\2\0"+
    "\1\11\1\0\2\11\20\0\3\11\1\u0101\30\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\3\1\2\11"+
    "\1\1\11\11\3\1\1\11\24\1\2\0\1\1\1\0"+
    "\1\1\5\11\55\1\1\11\1\0\3\1\1\0\221\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public class Tuple {
        public final int line;
        public final int col;
        public final String token;
        public final String type;

        public Tuple(int line, int col, String token, String type) {
            this.line = line;
            this.col = col;
            this.token = token;
            this.type = type;
        }
    }

    HashSet<String> keywords = new HashSet<>(Arrays.asList(
            "if", "else", "while", "switch", "case", "for", "foreach", "class", "behaviour",
            "based", "on", "behaves", "like", "try", "catch", "function",
            "mod", "of", "instance", "empty", "is"
            ));

    Queue<Symbol> symbolPipe = new ConcurrentLinkedQueue<Symbol>();

    boolean foundString = false;
    int prevLineTabCount = 0;
    StringBuilder string = new StringBuilder();

    public Symbol exportToken(int symNum, Object value, int line, int column) {

        if (value instanceof String && !(symNum == sym.LPAREN || symNum == sym.RPAREN)) {
            String text = (String) value;
            text = text.replace("(", "");
            text = text.replace("[", "");
            text = text.replace("{", "");
            text = text.replace(")", "");
            text = text.replace("]", "");
            text = text.replace("}", "");
            value = text;
        }

        if (symNum == sym.TAB)
            symbolPipe.add(new TabSymbol(symNum, line + 1, column + 1, value));
        else
            symbolPipe.add(new Symbol(symNum, line + 1, column + 1, value));

        if (!symbolPipe.isEmpty()) {
            return symbolPipe.poll();
        } else {
            return new Symbol(sym.EOF);
        }
    }

    public Symbol exportToken(int[] symNums, Object[] values) {

        for (int counter = 0; counter < symNums.length; counter++) {
            if (values[counter] instanceof String && !(symNums[counter] == sym.LPAREN || symNums[counter] == sym.RPAREN)) {
                String text = (String) values[counter];
                text = text.replace("(", "");
                text = text.replace("[", "");
                text = text.replace("{", "");
                text = text.replace(")", "");
                text = text.replace("]", "");
                text = text.replace("}", "");
                values[counter] = text;
            }
            if (symNums[counter] == sym.TAB)
                symbolPipe.add(new TabSymbol(symNums[counter], values[counter]));
            else
                symbolPipe.add(new Symbol(symNums[counter], values[counter]));
        }

        if (!symbolPipe.isEmpty()) {
            return symbolPipe.poll();
        } else {
            return new Symbol(sym.EOF);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EogenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3468) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (!symbolPipe.isEmpty()) {
        return symbolPipe.poll();
    } else {
        return new Symbol(sym.EOF);
    }
            }  // fall though
            case 258: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (foundString) string.append(yytext());
            } 
            // fall through
          case 84: break;
          case 2: 
            { String text = yytext();
    if (text.length() > prevLineTabCount) {
        if ((text.length() - prevLineTabCount) / 2 == 1) {
            prevLineTabCount = text.length();
            return exportToken(sym.START, yytext(), yyline, yycolumn);
        } else {
            int[] syms = new int[(prevLineTabCount - text.length()) / 2];
            for (int counter = 0; counter < (prevLineTabCount - text.length()) / 2; counter++) {
                syms[counter] = sym.START;
            }
            Object[] values = new Object[(prevLineTabCount - text.length()) / 2];
            prevLineTabCount = text.length();
            return exportToken(syms, values);
        }
    } else if (text.length() < prevLineTabCount) {
        if ((prevLineTabCount - text.length()) / 2 == 1) {
            prevLineTabCount = text.length();
            return exportToken(sym.END, yytext(), yyline, yycolumn);
        } else {
            int[] syms = new int[(prevLineTabCount - text.length()) / 2];
            for (int counter = 0; counter < (prevLineTabCount - text.length()) / 2; counter++) {
                syms[counter] = sym.END;
            }
            Object[] values = new Object[(prevLineTabCount - text.length()) / 2];
            prevLineTabCount = text.length();
            return exportToken(syms, values);
        }
    }
            } 
            // fall through
          case 85: break;
          case 3: 
            { if (!foundString) return exportToken(sym.DIVISION, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 86: break;
          case 4: 
            { if (!foundString) return exportToken(sym.MULTIPLY, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 87: break;
          case 5: 
            { if (!foundString) return exportToken(sym.NUMBER, Double.parseDouble(yytext()), yyline, yycolumn);
    else string.append(yytext());
            } 
            // fall through
          case 88: break;
          case 6: 
            { if (!foundString) return exportToken(sym.IDENTIFIER, yytext(), yyline, yycolumn);
    else string.append(yytext());
            } 
            // fall through
          case 89: break;
          case 7: 
            { System.out.print(yytext());
            } 
            // fall through
          case 90: break;
          case 8: 
            { if (!foundString) return exportToken(sym.SUBTRACT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 91: break;
          case 9: 
            { if (!foundString) return exportToken(sym.LBRACKET, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 92: break;
          case 10: 
            { if (!foundString) return exportToken(sym.RBRACKET, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 93: break;
          case 11: 
            { if (!foundString) return exportToken(sym.ASSIGN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 94: break;
          case 12: 
            { if (!foundString) return exportToken(sym.SUM, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 95: break;
          case 13: 
            { if (!foundString) return exportToken(sym.POWER, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 96: break;
          case 14: 
            { if (!foundString) return exportToken(sym.LPAREN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 97: break;
          case 15: 
            { if (!foundString) return exportToken(sym.RPAREN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 98: break;
          case 16: 
            { if (!foundString) return exportToken(sym.LBRACE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 99: break;
          case 17: 
            { if (!foundString) return exportToken(sym.RBRACE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 100: break;
          case 18: 
            { if (!foundString) return exportToken(sym.SEMI, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 101: break;
          case 19: 
            { if (!foundString) return exportToken(sym.COLON, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 102: break;
          case 20: 
            { if (!foundString) return exportToken(sym.COMMA, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 103: break;
          case 21: 
            { if (!foundString) return exportToken(sym.GT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 104: break;
          case 22: 
            { if (!foundString) return exportToken(sym.LT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 105: break;
          case 23: 
            { if (!foundString) {
        foundString = true;
        string.append(yytext());
    } else {
        foundString = false;
        string.append(yytext());
        String result = string.toString();
        string.setLength(0);
        string = new StringBuilder();
        return exportToken(sym.STRING, result, yyline, yycolumn);
    }
            } 
            // fall through
          case 106: break;
          case 24: 
            { /* ignore */
            } 
            // fall through
          case 107: break;
          case 25: 
            { if (!foundString) return exportToken(sym.ARROW, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 108: break;
          case 26: 
            { if (!foundString) return exportToken(sym.EQUAL, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 109: break;
          case 27: 
            { if (!foundString) return exportToken(sym.GE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 110: break;
          case 28: 
            { if (!foundString) return exportToken(sym.LE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 111: break;
          case 29: 
            { if (!foundString) return exportToken(sym.NE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 112: break;
          case 30: 
            { if (!foundString) return exportToken(sym.AS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 113: break;
          case 31: 
            { if (!foundString) return exportToken(sym.IS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 114: break;
          case 32: 
            { if (!foundString) return exportToken(sym.IF, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 115: break;
          case 33: 
            { if (!foundString) return exportToken(sym.IN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 116: break;
          case 34: 
            { if (!foundString) return exportToken(sym.DO, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 117: break;
          case 35: 
            { if (!foundString) return exportToken(sym.OR, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 118: break;
          case 36: 
            { if (!foundString) return exportToken(sym.OF, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 119: break;
          case 37: 
            { if (!foundString) return exportToken(sym.ON, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 120: break;
          case 38: 
            { if (!foundString) return exportToken(sym.BY, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 121: break;
          case 39: 
            { if (!foundString) return exportToken(sym.ARE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 122: break;
          case 40: 
            { if (!foundString) return exportToken(sym.TRY, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 123: break;
          case 41: 
            { if (!foundString) return exportToken(sym.MOD, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 124: break;
          case 42: 
            { if (!foundString) return exportToken(sym.FOR, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 125: break;
          case 43: 
            { if (!foundString) return exportToken(sym.NEW, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 126: break;
          case 44: 
            { if (!foundString) return exportToken(sym.NOT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 127: break;
          case 45: 
            { if (!foundString) return exportToken(sym.ARGS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 128: break;
          case 46: 
            { if (!foundString) return exportToken(sym.STEP, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 129: break;
          case 47: 
            { if (!foundString) return exportToken(sym.ITEM, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 130: break;
          case 48: 
            { if (!foundString) return exportToken(sym.TRUE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 131: break;
          case 49: 
            { if (!foundString) return exportToken(sym.THEN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 132: break;
          case 50: 
            { if (!foundString) return exportToken(sym.EACH, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 133: break;
          case 51: 
            { if (!foundString) return exportToken(sym.ELSE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 134: break;
          case 52: 
            { if (!foundString) return exportToken(sym.WITH, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 135: break;
          case 53: 
            { if (!foundString) return exportToken(sym.PROP, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 136: break;
          case 54: 
            { if (!foundString) return exportToken(sym.LIKE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 137: break;
          case 55: 
            { if (!foundString) return exportToken(sym.LOOP, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 138: break;
          case 56: 
            { if (!foundString) return exportToken(sym.AND, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 139: break;
          case 57: 
            { if (!foundString) return exportToken(sym.EMPTY, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 140: break;
          case 58: 
            { if (!foundString) return exportToken(sym.TIMES, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 141: break;
          case 59: 
            { if (!foundString) return exportToken(sym.ERROR, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 142: break;
          case 60: 
            { if (!foundString) return exportToken(sym.ENCAPSULATE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 143: break;
          case 61: 
            { if (!foundString) return exportToken(sym.DOING, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 144: break;
          case 62: 
            { if (!foundString) return exportToken(sym.FALSE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 145: break;
          case 63: 
            { if (!foundString) return exportToken(sym.NAMED, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 146: break;
          case 64: 
            { if (!foundString) return exportToken(sym.PROPS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 147: break;
          case 65: 
            { if (!foundString) return exportToken(sym.CATCH, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 148: break;
          case 66: 
            { if (!foundString) return exportToken(sym.CLASS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 149: break;
          case 67: 
            { if (!foundString) return exportToken(sym.UNTIL, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 150: break;
          case 68: 
            { if (!foundString) return exportToken(sym.BASED, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 151: break;
          case 69: 
            { if (!foundString) return exportToken(sym.VALUE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 152: break;
          case 70: 
            { if (!foundString) return exportToken(sym.ACTION, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 153: break;
          case 71: 
            { if (!foundString) return exportToken(sym.RETURN, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 154: break;
          case 72: 
            { if (!foundString) return exportToken(sym.DEFINE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 155: break;
          case 73: 
            { if (!foundString) return exportToken(sym.PARAMS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 156: break;
          case 74: 
            { if (!foundString) return exportToken(sym.CAUGHT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 157: break;
          case 75: 
            { if (!foundString) return exportToken(sym.OBJECT, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 158: break;
          case 76: 
            { if (!foundString) return exportToken(sym.BEHAVES, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 159: break;
          case 77: 
            { if (!foundString) return exportToken(sym.REMEMBER, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 160: break;
          case 78: 
            { if (!foundString) return exportToken(sym.INSTANCE, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 161: break;
          case 79: 
            { if (!foundString) return exportToken(sym.FUNCTION, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 162: break;
          case 80: 
            { if (!foundString) return exportToken(sym.SATISFIED, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 163: break;
          case 81: 
            { if (!foundString) return exportToken(sym.CAREFULLY, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 164: break;
          case 82: 
            { if (!foundString) return exportToken(sym.BEHAVIOUR, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 165: break;
          case 83: 
            { if (!foundString) return exportToken(sym.CONDITIONS, yytext(), yyline, yycolumn); else string.append(yytext());
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java EogenLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        EogenLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new EogenLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
